{"version":3,"file":"index.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client, {\n  RedirectLoginOptions,\n  Auth0Client,\n} from \"@auth0/auth0-spa-js\";\n\nexport interface IAuth0User {\n  nickname?: string;\n  name: string;\n  picture: string; // URL for the user's pucture\n  updated_at: string;\n  email: string;\n  email_verified: boolean;\n  sub: string;\n}\n\nconst DEFAULT_REDIRECT_CALLBACK = (appState?: { targetUrl: string }) => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nconst DEFAULT_USER: IAuth0User = {\n  name: \"\",\n  picture: \"\", // URL for the user's pucture\n  updated_at: \"\",\n  email: \"\",\n  email_verified: false,\n  sub: \"\",\n};\n\n/**\n * Fetches the user from Auth0\n */\nasync function resolveCurrentUser(\n  auth0Client: Auth0Client\n): Promise<IAuth0User> {\n  return await auth0Client.getUser();\n}\n\ninterface IAuthContext {\n  isAuthenticated: boolean;\n  isProcessing: boolean;\n  user: IAuth0User;\n  handleRedirectCallback: () => void;\n  loginWithRedirect: (options: RedirectLoginOptions) => void;\n  getTokenSilently: (scope?: string) => Promise<string>;\n  logout: () => void;\n}\nexport const AuthContext = React.createContext<IAuthContext>({\n  isAuthenticated: false,\n  isProcessing: false,\n  user: DEFAULT_USER,\n  // tslint:disable-next-line:no-empty\n  handleRedirectCallback: () => {},\n  // tslint:disable-next-line:no-empty\n  loginWithRedirect: (options: RedirectLoginOptions) => {},\n  getTokenSilently: () => Promise.resolve(\"\"),\n  // tslint:disable-next-line:no-empty\n  logout: () => {},\n});\n\nexport const useAuth = () => useContext(AuthContext);\nexport const AuthProvider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  client_id,\n  domain,\n  audience,\n}: {\n  children: React.ReactNode;\n  onRedirectCallback?: (args: any) => void;\n  client_id: string;\n  domain: string;\n  audience: string;\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [user, setUser] = useState<IAuth0User>(DEFAULT_USER);\n  const [auth0Client, setAuth0] = useState<Auth0Client>();\n  const [isProcessing, setIsProcessing] = useState(true);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client({\n        domain,\n        client_id,\n        audience,\n      });\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes(\"code=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const authenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(authenticated);\n\n      if (authenticated) {\n        const currentUser = await resolveCurrentUser(auth0FromHook);\n        setUser(currentUser);\n      }\n\n      setIsProcessing(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const handleRedirectCallback = async () => {\n    if (auth0Client) {\n      setIsProcessing(true);\n      const currentUser = await resolveCurrentUser(auth0Client);\n      setIsProcessing(false);\n      setIsAuthenticated(true);\n      setUser(currentUser);\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isAuthenticated,\n        user,\n        isProcessing,\n        handleRedirectCallback,\n        loginWithRedirect: (options: RedirectLoginOptions) => {\n          if (!auth0Client) {\n            throw new Error(\"Auth0 not initialized\");\n          }\n          auth0Client.loginWithRedirect(options);\n        },\n        getTokenSilently: () => {\n          if (!auth0Client) {\n            return Promise.reject(\"Auth0 not initialized\");\n          }\n          return auth0Client.getTokenSilently();\n        },\n        logout: () => {\n          if (!auth0Client) {\n            throw new Error(\"Auth0 not initialized\");\n          }\n          auth0Client.logout({ returnTo: `${window.location.origin}` });\n        },\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"names":["resolveCurrentUser","auth0Client","getUser","DEFAULT_REDIRECT_CALLBACK","appState","window","history","replaceState","document","title","targetUrl","location","pathname","DEFAULT_USER","name","picture","updated_at","email","email_verified","sub","AuthContext","React","createContext","isAuthenticated","isProcessing","user","handleRedirectCallback","loginWithRedirect","options","getTokenSilently","Promise","resolve","logout","useContext","useState","useEffect","createAuth0Client","domain","client_id","audience","auth0FromHook","authenticated","setIsProcessing","setIsAuthenticated","currentUser","setUser","setAuth0","search","includes","onRedirectCallback","initAuth0","Provider","value","Error","reject","returnTo","children"],"mappings":"wIAsCeA,WACbC,8BAEaA,EAAYC,+CAzBrBC,WAA6BC,GACjCC,OAAOC,QAAQC,aACb,GACAC,SAASC,MACTL,GAAYA,EAASM,UACjBN,EAASM,UACTL,OAAOM,SAASC,WAIlBC,EAA2B,CAC/BC,KAAM,GACNC,QAAS,GACTC,WAAY,GACZC,MAAO,GACPC,gBAAgB,EAChBC,IAAK,IAqBMC,EAAcC,EAAMC,cAA4B,CAC3DC,iBAAiB,EACjBC,cAAc,EACdC,KAAMZ,EAENa,oCAEAC,2BAAoBC,KACpBC,mCAAwBC,QAAQC,QAAQ,KAExCC,8EAG2BC,aAAWb,4FAGjBjB,+CAWyB+B,YAAkB,mBACxCA,WAAqBrB,mBACbqB,6BACQA,YAAS,wBAEjDC,uDAEgCC,EAAkB,QAC5CC,YACAC,WACAC,mBAHIC,uCAYsBA,EAAcjB,iCAApCkB,gBASNC,GAAgB,GAPhBC,EAAmBF,uBAEfA,yBACwBzC,EAAmBwC,kBAAvCI,GACNC,EAAQD,yCAbVE,EAASN,uBAELnC,OAAOM,SAASoC,OAAOC,SAAS,gCACPR,EAAcd,2CACzCuB,uFAcJC,IAEC,IAaD7B,gBAACD,EAAY+B,UACXC,MAAO,iBACL7B,OACAE,eACAD,4DAdAvB,SACFyC,GAAgB,mBACU1C,EAAmBC,kBAAvC2C,GACNF,GAAgB,GAChBC,GAAmB,GACnBE,EAAQD,0GAWNjB,2BAAoBC,OACb3B,QACG,IAAIoD,MAAM,yBAElBpD,EAAY0B,kBAAkBC,IAEhCC,mCACO5B,EAGEA,EAAY4B,mBAFVC,QAAQwB,OAAO,0BAI1BtB,sBACO/B,QACG,IAAIoD,MAAM,yBAElBpD,EAAY+B,OAAO,CAAEuB,YAAalD,OAAOM,qBAI5C6C"}